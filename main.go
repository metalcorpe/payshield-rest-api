// Copyright PT Dymar Jaya Indonesia
// Date February 2020
// RestAPI Thales payShield HSM using Golang
// Code by Mudito Adi Pranowo
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package main

import (
	"flag"
	"fmt"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"
	"github.com/spf13/viper"
	"go.uber.org/zap"
)

var docs = flag.String("docs", "", "Generates routing documentation for RESTful API - markdown, json, or raml.")

// gin-swagger middleware
// swagger embed files
// @title chi-swagger example APIs
// @version 1.0
// @description chi-swagger example APIs
// @BasePath /
func main() {
	flag.Parse()
	// configure logger
	log, _ := zap.NewProduction(zap.WithCaller(false))
	defer func() {
		_ = log.Sync()
	}()

	// print current version
	log.Info("starting up API...")

	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.URLFormat)
	r.Use(render.SetContentType(render.ContentTypeJSON))
	//r.Mount("/debug", middleware.Profiler())

	addRoutes(r)

	viper.SetConfigType("yaml")
	viper.AddConfigPath("config")
	viper.SetConfigName("server.yaml")

	err := viper.ReadInConfig()
	if err != nil {
		log.Panic(err.Error())
		return
	}
	//r.Mount("/swagger", httpSwagger.WrapHandler)
	//docgen.PrintRoutes(r)
	//
	//if *docs == "markdown" {
	//	// Remove any existing `routes.md` file in the project directory.
	//	if err := os.Remove("routes.md"); err != nil && !errors.Is(err, os.ErrNotExist) {
	//		log.Fatal(err.Error())
	//	}
	//
	//	// Create a new `routes.md` file.
	//	f, err := os.Create("routes.md")
	//
	//	if err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	defer f.Close()
	//
	//	text := docgen.MarkdownRoutesDoc(r,
	//		docgen.MarkdownOpts{ // Here, `r` is the main router.
	//			//ProjectPath: "github.com/newline-sandbox/go-chi-docgen-example",
	//			URLMap: map[string]string{
	//				"github.com/newline-sandbox/go-chi-docgen-example/vendor/github.com/go-chi/chi/v5/": "https://github.com/go-chi/chi/blob/master/",
	//			},
	//			ForceRelativeLinks: true, // Without this, you will not see any links to the source code in the Markdown file on your local machine.
	//			Intro:              "Welcome to the documentation for the RESTful API.",
	//		})
	//
	//	// Write the Markdown generated by `docgen` to the `routes.md` file.
	//	if _, err = f.Write([]byte(text)); err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	return
	//} else if *docs == "json" {
	//	if err := os.Remove("routes.json"); err != nil && !errors.Is(err, os.ErrNotExist) {
	//		log.Fatal(err.Error())
	//	}
	//
	//	f, err := os.Create("routes.json")
	//
	//	if err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	defer f.Close()
	//
	//	json := docgen.JSONRoutesDoc(r) // Here, `r` is the main router.
	//
	//	if _, err = f.Write([]byte(json)); err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	return
	//} else if *docs == "raml" {
	//	if err := os.Remove("routes.raml"); err != nil && !errors.Is(err, os.ErrNotExist) {
	//		log.Fatal(err.Error())
	//	}
	//	f, err := os.Create("routes.raml")
	//
	//	if err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	defer f.Close()
	//
	//	ramlDocs := &raml.RAML{
	//		Title:     "RAML Representation of RESTful API",
	//		BaseUri:   "http://api.go-chi-docgen-example.com/v1",
	//		Version:   "v1.0",
	//		MediaType: "application/json",
	//	}
	//
	//	if err := chi.Walk(r, func(method string, route string, handler http.Handler, middlewares ...func(http.Handler) http.Handler) error {
	//		handlerInfo := docgen.GetFuncInfo(handler)
	//		resource := &raml.Resource{
	//			DisplayName: strings.ToUpper(method) + " " + route,
	//			Description: "Handler Function: " + handlerInfo.Func + "\nComment: " + handlerInfo.Comment,
	//		}
	//
	//		return ramlDocs.Add(method, route, resource)
	//	}); err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	raml, err := yaml.Marshal(ramlDocs)
	//
	//	if err != nil {
	//		log.Fatal(err.Error())
	//	}
	//
	//	if _, err = f.Write(append([]byte("#%RAML 1.0\n---\n"), raml...)); err != nil { // For the RAML document to be valid, the first line of the file must begin with the text "#%RAML 1.0" followed by an newline character.
	//		log.Fatal(err.Error())
	//	}
	//
	//	return
	//}

	errHttp := http.ListenAndServeTLS(":"+viper.GetString("server.port"), "server.crt", "server.key", r)
	if errHttp != nil {
		log.Fatal(errHttp.Error())
		return
	}
}

func authenticateUserToken(username, password, profile string) bool {
	viper.SetConfigType("json")
	viper.AddConfigPath(".")
	viper.SetConfigName("profile.conf")

	errconf := viper.ReadInConfig()
	if errconf != nil {
		fmt.Println("Load file config profile error")
	}

	USERNAME := viper.GetString(profile + "." + "username")
	PASSWORD := viper.GetString(profile + "." + "password")
	TOKENISE := viper.GetBool(profile + "." + "tokenise")

	err := (username == USERNAME) && (password == PASSWORD) && TOKENISE

	return err
}

func authenticateUserDetoken(username, password, profile string) bool {
	viper.SetConfigType("json")
	viper.AddConfigPath(".")
	viper.SetConfigName("profile.conf")

	errconf := viper.ReadInConfig()
	if errconf != nil {
		fmt.Println("Load file config profile error")
	}

	USERNAME := viper.GetString(profile + "." + "username")
	PASSWORD := viper.GetString(profile + "." + "password")
	TOKENISE := viper.GetBool(profile + "." + "detokenise")

	err := (username == USERNAME) && (password == PASSWORD) && TOKENISE

	return err
}

func respondWithError(code int, message string, c *gin.Context) {
	resp := map[string]string{"error": message}

	c.JSON(code, resp)
	c.Abort()
}

func checkProfileMask(profile string) bool {
	viper.SetConfigType("json")
	viper.AddConfigPath(".")
	viper.SetConfigName("profile.conf")

	errconf := viper.ReadInConfig()
	if errconf != nil {
		fmt.Println("Load file config profile error")
	}

	return viper.GetBool(profile + ".mask")
}

func createMask(profile, data string) string {
	viper.SetConfigType("json")
	viper.AddConfigPath(".")
	viper.SetConfigName("profile.conf")

	errconf := viper.ReadInConfig()
	if errconf != nil {
		fmt.Println("Load file config profile error")
	}

	ppl := viper.GetInt(profile + ".maskProfile." + "preservedPrefixLength")
	psl := viper.GetInt(profile + ".maskProfile." + "preservedSuffixLength")
	lenData := len(data)
	if (ppl+psl > lenData) || (ppl+psl < 0) || (ppl < 0) || (psl < 0) || (ppl > lenData) || (psl > lenData) {
		err := "Preserved prefix and suffix length in mask profile not consistent"
		return err
	}

	datappl := data[:ppl]
	datapsl := data[(len(data) - psl):]
	maskchar := viper.GetString(profile + ".maskProfile." + "maskChar")
	return datappl + strings.Repeat(maskchar, len(data[ppl:len(data)-psl])) + datapsl
}
