// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protobuf/payshield.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenerateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                   string         `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Keymessage             string         `protobuf:"bytes,2,opt,name=Keymessage,proto3" json:"Keymessage,omitempty"`
	KeyScheme              string         `protobuf:"bytes,3,opt,name=KeyScheme,proto3" json:"KeyScheme,omitempty"`
	DeriveKeyMode          string         `protobuf:"bytes,4,opt,name=DeriveKeyMode,proto3" json:"DeriveKeyMode,omitempty"`
	DUKPTMasterKeymessage  string         `protobuf:"bytes,5,opt,name=DUKPTMasterKeymessage,proto3" json:"DUKPTMasterKeymessage,omitempty"`
	DUKPTMasterKey         string         `protobuf:"bytes,6,opt,name=DUKPTMasterKey,proto3" json:"DUKPTMasterKey,omitempty"`
	KSN                    string         `protobuf:"bytes,7,opt,name=KSN,proto3" json:"KSN,omitempty"`
	ZkaMasterKeymessage    string         `protobuf:"bytes,8,opt,name=ZkaMasterKeymessage,proto3" json:"ZkaMasterKeymessage,omitempty"`
	ZkaMasterKey           string         `protobuf:"bytes,9,opt,name=ZkaMasterKey,proto3" json:"ZkaMasterKey,omitempty"`
	ZkaOption              string         `protobuf:"bytes,10,opt,name=ZkaOption,proto3" json:"ZkaOption,omitempty"`
	ZkaRndi                string         `protobuf:"bytes,11,opt,name=ZkaRndi,proto3" json:"ZkaRndi,omitempty"`
	ZmkTmkFlag             string         `protobuf:"bytes,12,opt,name=ZmkTmkFlag,proto3" json:"ZmkTmkFlag,omitempty"`
	ZmkTmkBdk              string         `protobuf:"bytes,13,opt,name=ZmkTmkBdk,proto3" json:"ZmkTmkBdk,omitempty"`
	IKSN                   string         `protobuf:"bytes,14,opt,name=IKSN,proto3" json:"IKSN,omitempty"`
	ExportKeyScheme        string         `protobuf:"bytes,15,opt,name=ExportKeyScheme,proto3" json:"ExportKeyScheme,omitempty"`
	AtallaVariant          string         `protobuf:"bytes,16,opt,name=AtallaVariant,proto3" json:"AtallaVariant,omitempty"`
	LMKId                  string         `protobuf:"bytes,17,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	KeyUsage               string         `protobuf:"bytes,18,opt,name=KeyUsage,proto3" json:"KeyUsage,omitempty"`
	Algorithm              string         `protobuf:"bytes,19,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	ModeOfUse              string         `protobuf:"bytes,20,opt,name=ModeOfUse,proto3" json:"ModeOfUse,omitempty"`
	KVN                    string         `protobuf:"bytes,21,opt,name=KVN,proto3" json:"KVN,omitempty"`
	Exportability          string         `protobuf:"bytes,22,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,23,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,24,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
}

func (x *GenerateKey) Reset() {
	*x = GenerateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKey) ProtoMessage() {}

func (x *GenerateKey) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKey.ProtoReflect.Descriptor instead.
func (*GenerateKey) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateKey) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *GenerateKey) GetKeymessage() string {
	if x != nil {
		return x.Keymessage
	}
	return ""
}

func (x *GenerateKey) GetKeyScheme() string {
	if x != nil {
		return x.KeyScheme
	}
	return ""
}

func (x *GenerateKey) GetDeriveKeyMode() string {
	if x != nil {
		return x.DeriveKeyMode
	}
	return ""
}

func (x *GenerateKey) GetDUKPTMasterKeymessage() string {
	if x != nil {
		return x.DUKPTMasterKeymessage
	}
	return ""
}

func (x *GenerateKey) GetDUKPTMasterKey() string {
	if x != nil {
		return x.DUKPTMasterKey
	}
	return ""
}

func (x *GenerateKey) GetKSN() string {
	if x != nil {
		return x.KSN
	}
	return ""
}

func (x *GenerateKey) GetZkaMasterKeymessage() string {
	if x != nil {
		return x.ZkaMasterKeymessage
	}
	return ""
}

func (x *GenerateKey) GetZkaMasterKey() string {
	if x != nil {
		return x.ZkaMasterKey
	}
	return ""
}

func (x *GenerateKey) GetZkaOption() string {
	if x != nil {
		return x.ZkaOption
	}
	return ""
}

func (x *GenerateKey) GetZkaRndi() string {
	if x != nil {
		return x.ZkaRndi
	}
	return ""
}

func (x *GenerateKey) GetZmkTmkFlag() string {
	if x != nil {
		return x.ZmkTmkFlag
	}
	return ""
}

func (x *GenerateKey) GetZmkTmkBdk() string {
	if x != nil {
		return x.ZmkTmkBdk
	}
	return ""
}

func (x *GenerateKey) GetIKSN() string {
	if x != nil {
		return x.IKSN
	}
	return ""
}

func (x *GenerateKey) GetExportKeyScheme() string {
	if x != nil {
		return x.ExportKeyScheme
	}
	return ""
}

func (x *GenerateKey) GetAtallaVariant() string {
	if x != nil {
		return x.AtallaVariant
	}
	return ""
}

func (x *GenerateKey) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *GenerateKey) GetKeyUsage() string {
	if x != nil {
		return x.KeyUsage
	}
	return ""
}

func (x *GenerateKey) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *GenerateKey) GetModeOfUse() string {
	if x != nil {
		return x.ModeOfUse
	}
	return ""
}

func (x *GenerateKey) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

func (x *GenerateKey) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

func (x *GenerateKey) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *GenerateKey) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

type GenerateKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyExport string `protobuf:"bytes,2,opt,name=KeyExport,proto3" json:"KeyExport,omitempty"`
	KCV       string `protobuf:"bytes,3,opt,name=KCV,proto3" json:"KCV,omitempty"`
	ZkaRndi   string `protobuf:"bytes,4,opt,name=ZkaRndi,proto3" json:"ZkaRndi,omitempty"`
}

func (x *GenerateKeyResp) Reset() {
	*x = GenerateKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeyResp) ProtoMessage() {}

func (x *GenerateKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeyResp.ProtoReflect.Descriptor instead.
func (*GenerateKeyResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateKeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenerateKeyResp) GetKeyExport() string {
	if x != nil {
		return x.KeyExport
	}
	return ""
}

func (x *GenerateKeyResp) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

func (x *GenerateKeyResp) GetZkaRndi() string {
	if x != nil {
		return x.ZkaRndi
	}
	return ""
}

type Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LMKmessage string `protobuf:"bytes,1,opt,name=LMKmessage,proto3" json:"LMKmessage,omitempty"`
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{2}
}

func (x *Diagnostics) GetLMKmessage() string {
	if x != nil {
		return x.LMKmessage
	}
	return ""
}

type DiagnosticsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LMKCheck       string `protobuf:"bytes,1,opt,name=LMKCheck,proto3" json:"LMKCheck,omitempty"`
	FirmwareNumber string `protobuf:"bytes,2,opt,name=FirmwareNumber,proto3" json:"FirmwareNumber,omitempty"`
}

func (x *DiagnosticsRes) Reset() {
	*x = DiagnosticsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsRes) ProtoMessage() {}

func (x *DiagnosticsRes) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsRes.ProtoReflect.Descriptor instead.
func (*DiagnosticsRes) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{3}
}

func (x *DiagnosticsRes) GetLMKCheck() string {
	if x != nil {
		return x.LMKCheck
	}
	return ""
}

func (x *DiagnosticsRes) GetFirmwareNumber() string {
	if x != nil {
		return x.FirmwareNumber
	}
	return ""
}

type PinVer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tpk                 string `protobuf:"bytes,1,opt,name=Tpk,proto3" json:"Tpk,omitempty"`
	Pvk                 string `protobuf:"bytes,2,opt,name=Pvk,proto3" json:"Pvk,omitempty"`
	PinBlock            string `protobuf:"bytes,3,opt,name=PinBlock,proto3" json:"PinBlock,omitempty"`
	Pan                 string `protobuf:"bytes,4,opt,name=Pan,proto3" json:"Pan,omitempty"`
	DecimalizationTable string `protobuf:"bytes,5,opt,name=DecimalizationTable,proto3" json:"DecimalizationTable,omitempty"`
	PinValidationData   string `protobuf:"bytes,6,opt,name=PinValidationData,proto3" json:"PinValidationData,omitempty"`
	PinOffset           string `protobuf:"bytes,7,opt,name=PinOffset,proto3" json:"PinOffset,omitempty"`
}

func (x *PinVer) Reset() {
	*x = PinVer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinVer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinVer) ProtoMessage() {}

func (x *PinVer) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinVer.ProtoReflect.Descriptor instead.
func (*PinVer) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{4}
}

func (x *PinVer) GetTpk() string {
	if x != nil {
		return x.Tpk
	}
	return ""
}

func (x *PinVer) GetPvk() string {
	if x != nil {
		return x.Pvk
	}
	return ""
}

func (x *PinVer) GetPinBlock() string {
	if x != nil {
		return x.PinBlock
	}
	return ""
}

func (x *PinVer) GetPan() string {
	if x != nil {
		return x.Pan
	}
	return ""
}

func (x *PinVer) GetDecimalizationTable() string {
	if x != nil {
		return x.DecimalizationTable
	}
	return ""
}

func (x *PinVer) GetPinValidationData() string {
	if x != nil {
		return x.PinValidationData
	}
	return ""
}

func (x *PinVer) GetPinOffset() string {
	if x != nil {
		return x.PinOffset
	}
	return ""
}

type InpEnc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	ClearText string `protobuf:"bytes,2,opt,name=ClearText,proto3" json:"ClearText,omitempty"`
}

func (x *InpEnc) Reset() {
	*x = InpEnc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InpEnc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InpEnc) ProtoMessage() {}

func (x *InpEnc) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InpEnc.ProtoReflect.Descriptor instead.
func (*InpEnc) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{5}
}

func (x *InpEnc) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InpEnc) GetClearText() string {
	if x != nil {
		return x.ClearText
	}
	return ""
}

type InpDec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	CipherText string `protobuf:"bytes,2,opt,name=CipherText,proto3" json:"CipherText,omitempty"`
}

func (x *InpDec) Reset() {
	*x = InpDec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InpDec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InpDec) ProtoMessage() {}

func (x *InpDec) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InpDec.ProtoReflect.Descriptor instead.
func (*InpDec) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{6}
}

func (x *InpDec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InpDec) GetCipherText() string {
	if x != nil {
		return x.CipherText
	}
	return ""
}

type MigrateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeCode2D          string         `protobuf:"bytes,1,opt,name=KeyTypeCode2d,proto3" json:"KeyTypeCode2d,omitempty"`
	KeyLenFlag             string         `protobuf:"bytes,2,opt,name=KeyLenFlag,proto3" json:"KeyLenFlag,omitempty"`
	Key                    string         `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyTypeCode            string         `protobuf:"bytes,4,opt,name=KeyTypeCode,proto3" json:"KeyTypeCode,omitempty"`
	KeyScheme              string         `protobuf:"bytes,5,opt,name=KeyScheme,proto3" json:"KeyScheme,omitempty"`
	LMKId                  string         `protobuf:"bytes,6,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	KeyUsage               string         `protobuf:"bytes,7,opt,name=KeyUsage,proto3" json:"KeyUsage,omitempty"`
	ModeOfUse              string         `protobuf:"bytes,8,opt,name=ModeOfUse,proto3" json:"ModeOfUse,omitempty"`
	KVN                    string         `protobuf:"bytes,9,opt,name=KVN,proto3" json:"KVN,omitempty"`
	Exportability          string         `protobuf:"bytes,10,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,11,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,12,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
	KCVReturnFlag          string         `protobuf:"bytes,13,opt,name=KCVReturnFlag,proto3" json:"KCVReturnFlag,omitempty"`
	KCVmessage             string         `protobuf:"bytes,14,opt,name=KCVmessage,proto3" json:"KCVmessage,omitempty"`
}

func (x *MigrateReq) Reset() {
	*x = MigrateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateReq) ProtoMessage() {}

func (x *MigrateReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateReq.ProtoReflect.Descriptor instead.
func (*MigrateReq) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{7}
}

func (x *MigrateReq) GetKeyTypeCode2D() string {
	if x != nil {
		return x.KeyTypeCode2D
	}
	return ""
}

func (x *MigrateReq) GetKeyLenFlag() string {
	if x != nil {
		return x.KeyLenFlag
	}
	return ""
}

func (x *MigrateReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MigrateReq) GetKeyTypeCode() string {
	if x != nil {
		return x.KeyTypeCode
	}
	return ""
}

func (x *MigrateReq) GetKeyScheme() string {
	if x != nil {
		return x.KeyScheme
	}
	return ""
}

func (x *MigrateReq) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *MigrateReq) GetKeyUsage() string {
	if x != nil {
		return x.KeyUsage
	}
	return ""
}

func (x *MigrateReq) GetModeOfUse() string {
	if x != nil {
		return x.ModeOfUse
	}
	return ""
}

func (x *MigrateReq) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

func (x *MigrateReq) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

func (x *MigrateReq) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *MigrateReq) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

func (x *MigrateReq) GetKCVReturnFlag() string {
	if x != nil {
		return x.KCVReturnFlag
	}
	return ""
}

func (x *MigrateReq) GetKCVmessage() string {
	if x != nil {
		return x.KCVmessage
	}
	return ""
}

type MigrateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KCV string `protobuf:"bytes,2,opt,name=KCV,proto3" json:"KCV,omitempty"`
}

func (x *MigrateRes) Reset() {
	*x = MigrateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRes) ProtoMessage() {}

func (x *MigrateRes) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRes.ProtoReflect.Descriptor instead.
func (*MigrateRes) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{8}
}

func (x *MigrateRes) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MigrateRes) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

type OptionalBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionalBlockIdentifier string `protobuf:"bytes,1,opt,name=OptionalBlockIdentifier,proto3" json:"OptionalBlockIdentifier,omitempty"`
	OptionalBlockLenght     string `protobuf:"bytes,2,opt,name=OptionalBlockLenght,proto3" json:"OptionalBlockLenght,omitempty"`
	ModifiedExportValue     string `protobuf:"bytes,3,opt,name=ModifiedExportValue,proto3" json:"ModifiedExportValue,omitempty"`
	KeyBlockVersionID       string `protobuf:"bytes,4,opt,name=KeyBlockVersionID,proto3" json:"KeyBlockVersionID,omitempty"`
}

func (x *OptionalBlock) Reset() {
	*x = OptionalBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalBlock) ProtoMessage() {}

func (x *OptionalBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalBlock.ProtoReflect.Descriptor instead.
func (*OptionalBlock) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{9}
}

func (x *OptionalBlock) GetOptionalBlockIdentifier() string {
	if x != nil {
		return x.OptionalBlockIdentifier
	}
	return ""
}

func (x *OptionalBlock) GetOptionalBlockLenght() string {
	if x != nil {
		return x.OptionalBlockLenght
	}
	return ""
}

func (x *OptionalBlock) GetModifiedExportValue() string {
	if x != nil {
		return x.ModifiedExportValue
	}
	return ""
}

func (x *OptionalBlock) GetKeyBlockVersionID() string {
	if x != nil {
		return x.KeyBlockVersionID
	}
	return ""
}

type ExportKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keymessage             string         `protobuf:"bytes,1,opt,name=Keymessage,proto3" json:"Keymessage,omitempty"`
	ZmkTmkFlag             string         `protobuf:"bytes,2,opt,name=ZmkTmkFlag,proto3" json:"ZmkTmkFlag,omitempty"`
	ZMK_TMK                string         `protobuf:"bytes,3,opt,name=ZMK_TMK,json=ZMKTMK,proto3" json:"ZMK_TMK,omitempty"`
	Key                    string         `protobuf:"bytes,4,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyScheme              string         `protobuf:"bytes,5,opt,name=KeyScheme,proto3" json:"KeyScheme,omitempty"`
	IV                     string         `protobuf:"bytes,6,opt,name=IV,proto3" json:"IV,omitempty"`
	AtallaVariant          string         `protobuf:"bytes,7,opt,name=AtallaVariant,proto3" json:"AtallaVariant,omitempty"`
	LMKId                  string         `protobuf:"bytes,8,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	Exportability          string         `protobuf:"bytes,9,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,10,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,11,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
	KVN                    string         `protobuf:"bytes,12,opt,name=KVN,proto3" json:"KVN,omitempty"`
}

func (x *ExportKeyReq) Reset() {
	*x = ExportKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeyReq) ProtoMessage() {}

func (x *ExportKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeyReq.ProtoReflect.Descriptor instead.
func (*ExportKeyReq) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{10}
}

func (x *ExportKeyReq) GetKeymessage() string {
	if x != nil {
		return x.Keymessage
	}
	return ""
}

func (x *ExportKeyReq) GetZmkTmkFlag() string {
	if x != nil {
		return x.ZmkTmkFlag
	}
	return ""
}

func (x *ExportKeyReq) GetZMK_TMK() string {
	if x != nil {
		return x.ZMK_TMK
	}
	return ""
}

func (x *ExportKeyReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExportKeyReq) GetKeyScheme() string {
	if x != nil {
		return x.KeyScheme
	}
	return ""
}

func (x *ExportKeyReq) GetIV() string {
	if x != nil {
		return x.IV
	}
	return ""
}

func (x *ExportKeyReq) GetAtallaVariant() string {
	if x != nil {
		return x.AtallaVariant
	}
	return ""
}

func (x *ExportKeyReq) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *ExportKeyReq) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

func (x *ExportKeyReq) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *ExportKeyReq) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

func (x *ExportKeyReq) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

type ExportKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	KCV string `protobuf:"bytes,2,opt,name=KCV,proto3" json:"KCV,omitempty"`
}

func (x *ExportKeyResp) Reset() {
	*x = ExportKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeyResp) ProtoMessage() {}

func (x *ExportKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeyResp.ProtoReflect.Descriptor instead.
func (*ExportKeyResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{11}
}

func (x *ExportKeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExportKeyResp) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

type GeneratePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeIndicator       string         `protobuf:"bytes,1,opt,name=KeyTypeIndicator,proto3" json:"KeyTypeIndicator,omitempty"`
	KeyLen                 string         `protobuf:"bytes,2,opt,name=KeyLen,proto3" json:"KeyLen,omitempty"`
	PublicKeyEncoding      string         `protobuf:"bytes,3,opt,name=PublicKeyEncoding,proto3" json:"PublicKeyEncoding,omitempty"`
	PublicExponentLen      string         `protobuf:"bytes,4,opt,name=PublicExponentLen,proto3" json:"PublicExponentLen,omitempty"`
	PublicExponent         string         `protobuf:"bytes,5,opt,name=PublicExponent,proto3" json:"PublicExponent,omitempty"`
	LMKId                  string         `protobuf:"bytes,6,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	KVN                    string         `protobuf:"bytes,7,opt,name=KVN,proto3" json:"KVN,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,8,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,9,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
	Exportability          string         `protobuf:"bytes,10,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
}

func (x *GeneratePair) Reset() {
	*x = GeneratePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePair) ProtoMessage() {}

func (x *GeneratePair) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePair.ProtoReflect.Descriptor instead.
func (*GeneratePair) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{12}
}

func (x *GeneratePair) GetKeyTypeIndicator() string {
	if x != nil {
		return x.KeyTypeIndicator
	}
	return ""
}

func (x *GeneratePair) GetKeyLen() string {
	if x != nil {
		return x.KeyLen
	}
	return ""
}

func (x *GeneratePair) GetPublicKeyEncoding() string {
	if x != nil {
		return x.PublicKeyEncoding
	}
	return ""
}

func (x *GeneratePair) GetPublicExponentLen() string {
	if x != nil {
		return x.PublicExponentLen
	}
	return ""
}

func (x *GeneratePair) GetPublicExponent() string {
	if x != nil {
		return x.PublicExponent
	}
	return ""
}

func (x *GeneratePair) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *GeneratePair) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

func (x *GeneratePair) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *GeneratePair) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

func (x *GeneratePair) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

type GeneratePairResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey     string `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	PrivateKeyLen int32  `protobuf:"varint,2,opt,name=PrivateKeyLen,proto3" json:"PrivateKeyLen,omitempty"`
	PrivateKey    string `protobuf:"bytes,3,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
}

func (x *GeneratePairResp) Reset() {
	*x = GeneratePairResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePairResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePairResp) ProtoMessage() {}

func (x *GeneratePairResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePairResp.ProtoReflect.Descriptor instead.
func (*GeneratePairResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{13}
}

func (x *GeneratePairResp) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GeneratePairResp) GetPrivateKeyLen() int32 {
	if x != nil {
		return x.PrivateKeyLen
	}
	return 0
}

func (x *GeneratePairResp) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type TranslatePrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKeyLen          string         `protobuf:"bytes,1,opt,name=PrivateKeyLen,proto3" json:"PrivateKeyLen,omitempty"`
	PrivateKey             string         `protobuf:"bytes,2,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	LMKId                  string         `protobuf:"bytes,3,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	KVN                    string         `protobuf:"bytes,4,opt,name=KVN,proto3" json:"KVN,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,5,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,6,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
	Exportability          string         `protobuf:"bytes,7,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
}

func (x *TranslatePrivate) Reset() {
	*x = TranslatePrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslatePrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslatePrivate) ProtoMessage() {}

func (x *TranslatePrivate) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslatePrivate.ProtoReflect.Descriptor instead.
func (*TranslatePrivate) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{14}
}

func (x *TranslatePrivate) GetPrivateKeyLen() string {
	if x != nil {
		return x.PrivateKeyLen
	}
	return ""
}

func (x *TranslatePrivate) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *TranslatePrivate) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *TranslatePrivate) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

func (x *TranslatePrivate) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *TranslatePrivate) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

func (x *TranslatePrivate) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

type TranslatePrivateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKeyLen int32  `protobuf:"varint,1,opt,name=PrivateKeyLen,proto3" json:"PrivateKeyLen,omitempty"`
	PrivateKey    string `protobuf:"bytes,2,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
}

func (x *TranslatePrivateResp) Reset() {
	*x = TranslatePrivateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslatePrivateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslatePrivateResp) ProtoMessage() {}

func (x *TranslatePrivateResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslatePrivateResp.ProtoReflect.Descriptor instead.
func (*TranslatePrivateResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{15}
}

func (x *TranslatePrivateResp) GetPrivateKeyLen() int32 {
	if x != nil {
		return x.PrivateKeyLen
	}
	return 0
}

func (x *TranslatePrivateResp) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type ImportKeyOrDataUnderRSAPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionId           string         `protobuf:"bytes,1,opt,name=EncryptionId,proto3" json:"EncryptionId,omitempty"`
	PadModeId              string         `protobuf:"bytes,2,opt,name=PadModeId,proto3" json:"PadModeId,omitempty"`
	MaskGenFunc            string         `protobuf:"bytes,3,opt,name=MaskGenFunc,proto3" json:"MaskGenFunc,omitempty"`
	MGFHashFunc            string         `protobuf:"bytes,4,opt,name=MGFHashFunc,proto3" json:"MGFHashFunc,omitempty"`
	OAEPEncodingParam      string         `protobuf:"bytes,5,opt,name=OAEPEncodingParam,proto3" json:"OAEPEncodingParam,omitempty"`
	Keymessage             string         `protobuf:"bytes,6,opt,name=Keymessage,proto3" json:"Keymessage,omitempty"`
	DataBlock              string         `protobuf:"bytes,7,opt,name=DataBlock,proto3" json:"DataBlock,omitempty"`
	PrivateKeyFlag         string         `protobuf:"bytes,8,opt,name=PrivateKeyFlag,proto3" json:"PrivateKeyFlag,omitempty"`
	PrivateKeyLen          string         `protobuf:"bytes,9,opt,name=PrivateKeyLen,proto3" json:"PrivateKeyLen,omitempty"`
	PrivateKey             string         `protobuf:"bytes,10,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
	ImportKeymessage       string         `protobuf:"bytes,11,opt,name=ImportKeymessage,proto3" json:"ImportKeymessage,omitempty"`
	KeySchemeLMK           string         `protobuf:"bytes,12,opt,name=KeySchemeLMK,proto3" json:"KeySchemeLMK,omitempty"`
	KCVmessage             string         `protobuf:"bytes,13,opt,name=KCVmessage,proto3" json:"KCVmessage,omitempty"`
	KeyDataBlockmessage    string         `protobuf:"bytes,14,opt,name=KeyDataBlockmessage,proto3" json:"KeyDataBlockmessage,omitempty"`
	KcvLen                 string         `protobuf:"bytes,15,opt,name=KcvLen,proto3" json:"KcvLen,omitempty"`
	LMKId                  string         `protobuf:"bytes,16,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
	KeyUsage               string         `protobuf:"bytes,17,opt,name=KeyUsage,proto3" json:"KeyUsage,omitempty"`
	ModeOfUse              string         `protobuf:"bytes,18,opt,name=ModeOfUse,proto3" json:"ModeOfUse,omitempty"`
	KVN                    string         `protobuf:"bytes,19,opt,name=KVN,proto3" json:"KVN,omitempty"`
	Exportability          string         `protobuf:"bytes,20,opt,name=Exportability,proto3" json:"Exportability,omitempty"`
	NumberOfOptionalBlocks string         `protobuf:"bytes,21,opt,name=NumberOfOptionalBlocks,proto3" json:"NumberOfOptionalBlocks,omitempty"`
	OptionalBlocks         *OptionalBlock `protobuf:"bytes,22,opt,name=OptionalBlocks,proto3" json:"OptionalBlocks,omitempty"`
}

func (x *ImportKeyOrDataUnderRSAPubKey) Reset() {
	*x = ImportKeyOrDataUnderRSAPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyOrDataUnderRSAPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyOrDataUnderRSAPubKey) ProtoMessage() {}

func (x *ImportKeyOrDataUnderRSAPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyOrDataUnderRSAPubKey.ProtoReflect.Descriptor instead.
func (*ImportKeyOrDataUnderRSAPubKey) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{16}
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetEncryptionId() string {
	if x != nil {
		return x.EncryptionId
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetPadModeId() string {
	if x != nil {
		return x.PadModeId
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetMaskGenFunc() string {
	if x != nil {
		return x.MaskGenFunc
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetMGFHashFunc() string {
	if x != nil {
		return x.MGFHashFunc
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetOAEPEncodingParam() string {
	if x != nil {
		return x.OAEPEncodingParam
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKeymessage() string {
	if x != nil {
		return x.Keymessage
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetDataBlock() string {
	if x != nil {
		return x.DataBlock
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetPrivateKeyFlag() string {
	if x != nil {
		return x.PrivateKeyFlag
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetPrivateKeyLen() string {
	if x != nil {
		return x.PrivateKeyLen
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetImportKeymessage() string {
	if x != nil {
		return x.ImportKeymessage
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKeySchemeLMK() string {
	if x != nil {
		return x.KeySchemeLMK
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKCVmessage() string {
	if x != nil {
		return x.KCVmessage
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKeyDataBlockmessage() string {
	if x != nil {
		return x.KeyDataBlockmessage
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKcvLen() string {
	if x != nil {
		return x.KcvLen
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKeyUsage() string {
	if x != nil {
		return x.KeyUsage
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetModeOfUse() string {
	if x != nil {
		return x.ModeOfUse
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetKVN() string {
	if x != nil {
		return x.KVN
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetExportability() string {
	if x != nil {
		return x.Exportability
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetNumberOfOptionalBlocks() string {
	if x != nil {
		return x.NumberOfOptionalBlocks
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKey) GetOptionalBlocks() *OptionalBlock {
	if x != nil {
		return x.OptionalBlocks
	}
	return nil
}

type ImportKeyOrDataUnderRSAPubKeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitializationValue string `protobuf:"bytes,1,opt,name=InitializationValue,proto3" json:"InitializationValue,omitempty"`
	Key                 string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	KCV                 string `protobuf:"bytes,3,opt,name=KCV,proto3" json:"KCV,omitempty"`
}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) Reset() {
	*x = ImportKeyOrDataUnderRSAPubKeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeyOrDataUnderRSAPubKeyResp) ProtoMessage() {}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeyOrDataUnderRSAPubKeyResp.ProtoReflect.Descriptor instead.
func (*ImportKeyOrDataUnderRSAPubKeyResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{17}
}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) GetInitializationValue() string {
	if x != nil {
		return x.InitializationValue
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ImportKeyOrDataUnderRSAPubKeyResp) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

type GenerateKCV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyTypeCode2D string `protobuf:"bytes,1,opt,name=KeyTypeCode2d,proto3" json:"KeyTypeCode2d,omitempty"`
	KeyLenFlag    string `protobuf:"bytes,2,opt,name=KeyLenFlag,proto3" json:"KeyLenFlag,omitempty"`
	Key           string `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	KeyTypeCode   string `protobuf:"bytes,4,opt,name=KeyTypeCode,proto3" json:"KeyTypeCode,omitempty"`
	KCV           string `protobuf:"bytes,5,opt,name=KCV,proto3" json:"KCV,omitempty"`
	LMKId         string `protobuf:"bytes,6,opt,name=LMKId,proto3" json:"LMKId,omitempty"`
}

func (x *GenerateKCV) Reset() {
	*x = GenerateKCV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKCV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKCV) ProtoMessage() {}

func (x *GenerateKCV) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKCV.ProtoReflect.Descriptor instead.
func (*GenerateKCV) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateKCV) GetKeyTypeCode2D() string {
	if x != nil {
		return x.KeyTypeCode2D
	}
	return ""
}

func (x *GenerateKCV) GetKeyLenFlag() string {
	if x != nil {
		return x.KeyLenFlag
	}
	return ""
}

func (x *GenerateKCV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenerateKCV) GetKeyTypeCode() string {
	if x != nil {
		return x.KeyTypeCode
	}
	return ""
}

func (x *GenerateKCV) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

func (x *GenerateKCV) GetLMKId() string {
	if x != nil {
		return x.LMKId
	}
	return ""
}

type GenerateKCVResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KCV string `protobuf:"bytes,1,opt,name=KCV,proto3" json:"KCV,omitempty"`
}

func (x *GenerateKCVResp) Reset() {
	*x = GenerateKCVResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_payshield_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKCVResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKCVResp) ProtoMessage() {}

func (x *GenerateKCVResp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_payshield_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKCVResp.ProtoReflect.Descriptor instead.
func (*GenerateKCVResp) Descriptor() ([]byte, []int) {
	return file_protobuf_payshield_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateKCVResp) GetKCV() string {
	if x != nil {
		return x.KCV
	}
	return ""
}

var File_protobuf_payshield_proto protoreflect.FileDescriptor

var file_protobuf_payshield_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x61, 0x79, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x22, 0xc4, 0x06, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65,
	0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x44, 0x55, 0x4b, 0x50, 0x54, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x55, 0x4b,
	0x50, 0x54, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x55, 0x4b, 0x50, 0x54, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x55, 0x4b, 0x50,
	0x54, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x53,
	0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x53, 0x4e, 0x12, 0x30, 0x0a, 0x13,
	0x5a, 0x6b, 0x61, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x5a, 0x6b, 0x61, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x5a, 0x6b, 0x61, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x5a, 0x6b, 0x61, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x5a, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x5a, 0x6b, 0x61, 0x52, 0x6e, 0x64, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x5a, 0x6b, 0x61, 0x52, 0x6e, 0x64, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x5a, 0x6d,
	0x6b, 0x54, 0x6d, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x5a, 0x6d, 0x6b, 0x54, 0x6d, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x5a, 0x6d,
	0x6b, 0x54, 0x6d, 0x6b, 0x42, 0x64, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x5a,
	0x6d, 0x6b, 0x54, 0x6d, 0x6b, 0x42, 0x64, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4b, 0x53, 0x4e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x4b, 0x53, 0x4e, 0x12, 0x28, 0x0a, 0x0f,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x4d, 0x4b,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x56,
	0x4e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x56, 0x4e, 0x12, 0x24, 0x0a, 0x0d,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x43, 0x56,
	0x12, 0x18, 0x0a, 0x07, 0x5a, 0x6b, 0x61, 0x52, 0x6e, 0x64, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x5a, 0x6b, 0x61, 0x52, 0x6e, 0x64, 0x69, 0x22, 0x2d, 0x0a, 0x0b, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x4d, 0x4b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x4d, 0x4b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x4d, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x4d, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xd8, 0x01, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x70,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x70, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x76, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x76, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x06, 0x49, 0x6e,
	0x70, 0x45, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x44, 0x65, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xeb, 0x03, 0x0a, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x65,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x56, 0x4e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x56, 0x4e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x36, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x43, 0x56, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4b, 0x43, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x4b, 0x43, 0x56, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4b, 0x43, 0x56, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30,
	0x0a, 0x0a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x43, 0x56,
	0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x68, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4b, 0x65, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x94,
	0x03, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x5a, 0x6d, 0x6b, 0x54, 0x6d, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x5a, 0x6d, 0x6b, 0x54, 0x6d, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x5a, 0x4d, 0x4b, 0x5f, 0x54, 0x4d, 0x4b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x5a, 0x4d, 0x4b, 0x54, 0x4d, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4b,
	0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x56, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x56, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x41, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x4d, 0x4b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x56, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x56, 0x4e, 0x22, 0x33, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x43, 0x56, 0x22, 0x9d, 0x03, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x4c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x56, 0x4e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x56, 0x4e, 0x12, 0x36, 0x0a, 0x16, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x76, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c,
	0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x4d,
	0x4b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x56, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x56, 0x4e, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a,
	0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c,
	0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0xba, 0x06, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x4f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x53, 0x41, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x6b, 0x47, 0x65,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x73,
	0x6b, 0x47, 0x65, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x47, 0x46, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x47, 0x46, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x41,
	0x45, 0x50, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x41, 0x45, 0x50, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65,
	0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x4d, 0x4b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x4c, 0x4d, 0x4b, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x43, 0x56, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x43, 0x56, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x63, 0x76, 0x4c, 0x65, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4b, 0x63, 0x76, 0x4c, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x4d, 0x4b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x56, 0x4e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x56, 0x4e,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f,
	0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0x79, 0x0a, 0x21, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x43, 0x56, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x43, 0x56, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x43, 0x56, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x4d, 0x4b, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x43, 0x56, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x43,
	0x56, 0x32, 0xf6, 0x04, 0x0a, 0x03, 0x48, 0x53, 0x4d, 0x12, 0x31, 0x0a, 0x09, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6b,
	0x65, 0x79, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x53, 0x41, 0x12,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x53, 0x41, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x43, 0x56, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x43, 0x56, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4b, 0x43, 0x56, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x63, 0x6f,
	0x72, 0x70, 0x65, 0x2f, 0x70, 0x61, 0x79, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2d, 0x72, 0x65,
	0x73, 0x74, 0x2d, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_payshield_proto_rawDescOnce sync.Once
	file_protobuf_payshield_proto_rawDescData = file_protobuf_payshield_proto_rawDesc
)

func file_protobuf_payshield_proto_rawDescGZIP() []byte {
	file_protobuf_payshield_proto_rawDescOnce.Do(func() {
		file_protobuf_payshield_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_payshield_proto_rawDescData)
	})
	return file_protobuf_payshield_proto_rawDescData
}

var file_protobuf_payshield_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_protobuf_payshield_proto_goTypes = []interface{}{
	(*GenerateKey)(nil),                       // 0: protobuf.GenerateKey
	(*GenerateKeyResp)(nil),                   // 1: protobuf.GenerateKeyResp
	(*Diagnostics)(nil),                       // 2: protobuf.Diagnostics
	(*DiagnosticsRes)(nil),                    // 3: protobuf.DiagnosticsRes
	(*PinVer)(nil),                            // 4: protobuf.PinVer
	(*InpEnc)(nil),                            // 5: protobuf.InpEnc
	(*InpDec)(nil),                            // 6: protobuf.InpDec
	(*MigrateReq)(nil),                        // 7: protobuf.MigrateReq
	(*MigrateRes)(nil),                        // 8: protobuf.MigrateRes
	(*OptionalBlock)(nil),                     // 9: protobuf.OptionalBlock
	(*ExportKeyReq)(nil),                      // 10: protobuf.ExportKeyReq
	(*ExportKeyResp)(nil),                     // 11: protobuf.ExportKeyResp
	(*GeneratePair)(nil),                      // 12: protobuf.GeneratePair
	(*GeneratePairResp)(nil),                  // 13: protobuf.GeneratePairResp
	(*TranslatePrivate)(nil),                  // 14: protobuf.TranslatePrivate
	(*TranslatePrivateResp)(nil),              // 15: protobuf.TranslatePrivateResp
	(*ImportKeyOrDataUnderRSAPubKey)(nil),     // 16: protobuf.ImportKeyOrDataUnderRSAPubKey
	(*ImportKeyOrDataUnderRSAPubKeyResp)(nil), // 17: protobuf.ImportKeyOrDataUnderRSAPubKeyResp
	(*GenerateKCV)(nil),                       // 18: protobuf.GenerateKCV
	(*GenerateKCVResp)(nil),                   // 19: protobuf.GenerateKCVResp
}
var file_protobuf_payshield_proto_depIdxs = []int32{
	9,  // 0: protobuf.GenerateKey.OptionalBlocks:type_name -> protobuf.OptionalBlock
	9,  // 1: protobuf.MigrateReq.OptionalBlocks:type_name -> protobuf.OptionalBlock
	9,  // 2: protobuf.ExportKeyReq.OptionalBlocks:type_name -> protobuf.OptionalBlock
	9,  // 3: protobuf.GeneratePair.OptionalBlocks:type_name -> protobuf.OptionalBlock
	9,  // 4: protobuf.TranslatePrivate.OptionalBlocks:type_name -> protobuf.OptionalBlock
	9,  // 5: protobuf.ImportKeyOrDataUnderRSAPubKey.OptionalBlocks:type_name -> protobuf.OptionalBlock
	4,  // 6: protobuf.HSM.VerifyPin:input_type -> protobuf.PinVer
	2,  // 7: protobuf.HSM.Version:input_type -> protobuf.Diagnostics
	7,  // 8: protobuf.HSM.Migrate:input_type -> protobuf.MigrateReq
	14, // 9: protobuf.HSM.MigratePrivate:input_type -> protobuf.TranslatePrivate
	0,  // 10: protobuf.HSM.Generatekey:input_type -> protobuf.GenerateKey
	10, // 11: protobuf.HSM.ExportKey:input_type -> protobuf.ExportKeyReq
	12, // 12: protobuf.HSM.GenerateKeyPair:input_type -> protobuf.GeneratePair
	16, // 13: protobuf.HSM.ImportKeyRSA:input_type -> protobuf.ImportKeyOrDataUnderRSAPubKey
	18, // 14: protobuf.HSM.GenetateKCV:input_type -> protobuf.GenerateKCV
	4,  // 15: protobuf.HSM.VerifyPin:output_type -> protobuf.PinVer
	3,  // 16: protobuf.HSM.Version:output_type -> protobuf.DiagnosticsRes
	8,  // 17: protobuf.HSM.Migrate:output_type -> protobuf.MigrateRes
	15, // 18: protobuf.HSM.MigratePrivate:output_type -> protobuf.TranslatePrivateResp
	1,  // 19: protobuf.HSM.Generatekey:output_type -> protobuf.GenerateKeyResp
	11, // 20: protobuf.HSM.ExportKey:output_type -> protobuf.ExportKeyResp
	13, // 21: protobuf.HSM.GenerateKeyPair:output_type -> protobuf.GeneratePairResp
	17, // 22: protobuf.HSM.ImportKeyRSA:output_type -> protobuf.ImportKeyOrDataUnderRSAPubKeyResp
	19, // 23: protobuf.HSM.GenetateKCV:output_type -> protobuf.GenerateKCVResp
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_protobuf_payshield_proto_init() }
func file_protobuf_payshield_proto_init() {
	if File_protobuf_payshield_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_payshield_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinVer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InpEnc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InpDec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePairResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslatePrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslatePrivateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeyOrDataUnderRSAPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportKeyOrDataUnderRSAPubKeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKCV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_payshield_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKCVResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_payshield_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_payshield_proto_goTypes,
		DependencyIndexes: file_protobuf_payshield_proto_depIdxs,
		MessageInfos:      file_protobuf_payshield_proto_msgTypes,
	}.Build()
	File_protobuf_payshield_proto = out.File
	file_protobuf_payshield_proto_rawDesc = nil
	file_protobuf_payshield_proto_goTypes = nil
	file_protobuf_payshield_proto_depIdxs = nil
}
